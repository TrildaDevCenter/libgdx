/*******************************************************************************
 * Copyright 2011 See AUTHORS file.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

apply plugin: "java"

if (JavaVersion.current().isJava9Compatible()) {
	compileJava {
		options.release = versions.java
	}
}
sourceCompatibility = versions.java
targetCompatibility = versions.java

sourceSets.main.java.srcDirs = ["src"]
sourceSets.main.resources.srcDirs = ["res"]
sourceSets.test.java.srcDirs = ["test"]

compileJava {
	options.fork = true
	options.incremental = true
}

jar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

dependencies {
	testImplementation libraries.junit
	api "com.badlogicgames.gdx:gdx-jnigen-loader:3.0.0-ANTKILLER-SNAPSHOT"
}

test {
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}
}

processResources.duplicatesStrategy = DuplicatesStrategy.EXCLUDE

apply plugin: "com.badlogicgames.gdx.gdx-jnigen"
jnigen {
	sharedLibName = "gdx"
	all {
		headerDirs = [
			"jni",
			"jni/etc1",
			"jni/gdx2d"
		]
		cIncludes = ["jni/gdx2d/*.c"]
		cppIncludes = ["jni/etc1/*.cpp"]
	}
	addWindows(x32, x86)
	addWindows(x64, x86)
	addLinux(x64, x86)
	addLinux(x32, ARM)
	addLinux(x64, ARM)
	addAndroid() {
		linkerFlags += " -llog"
	}
	addMac(x64, x86)
	addMac(x64, ARM)
	addIOS() {
		headerDirs += ["jni/iosgl"]
		cppIncludes = ["jni/iosgl/*.cpp"]
		linkerFlags += " -undefined dynamic_lookup "
	}
	robovm {
		extraXCFramework("libs/ObjectAL.xcframework")
	}
}
